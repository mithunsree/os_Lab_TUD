Task 1.1      :Refer to program 1.1.c
Question 1.1  :Execute your program from task 1.1 at least 100 times. Is the output of your program always exactly the same?                   Which value does the parent process print for my_value? What does the child print? Explain your observations.
Solution      :After executing the task 100 times the output of the program is not always the same since the process ID of both                parent and child changes at each execution and values of 'my_value' remains unchanged for both the processes.The                parent process prints 42 as the value of 'my_value',child process prints 18951 as the value of 'my_value'.                      According to the obsevations made the value of 'my_vlaue' does not change  but the ID of the process changes each                time the program is executed.

Task 2.1     : Refer to program 2.1.c
Question 2.1 : The thread id of main thread and newly created thread always changes in each execution. the my_value of main thread and new thread remains same. For main thread my_value is : 42, For new thread my_value is : 18951. After the joining of thread my_value is : 18951. When it is compared with the program 1.1.c, the child id and parent id is changing on every execution but the my_value remains same.





Task 3.1	: Refer to program 3.1.c
Question 3.1	: The PID always changes and changes to variables in a child process do not affect the value of the variables in the 
		  parent process. 
Question 3.2	: Pipes perhaps not exactly the most efficient way to do so, though.Threads share all address space, so we can easily pass 
		  pointers around between threads, by stashing them in global variables or as an argument.
		  The overhead of creating and opening the file descriptors will be costly and also one way communication is not efficient.
		  The only advantage may be the syncronization between threads as one thread will only read and the other shall write.
		  
Task 5.1 : Refer to program 5.1.c

Question 5.1 : After running the program atleast 100 times you can notice that the pid of the Parent as well as the child keeps on changing but the global my_value remains unchanged. In Shared Memory the access to the memory is unsychronized. So if a process is updating the shared memory, then another process should not be updating or reading the same shared memory. But in message queue eventhough the access is slow, it makes sure the data is read in the same order the data is written.

Question 5.2: In a multithreading situation, the threads that are active could use the shared memory to communicate between each other. Since the memory are shared there could be conservation of memory space. And since the shared memory is a fast way of communication, the data sharing can be done much more quickly.

